const axios = require('axios');
const fs = require('fs');
require('dotenv').config();

const TOKEN_STORAGE = 'tokens.json';
const ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY;
const BSCSCAN_API_KEY = process.env.BSCSCAN_API_KEY;
const COINGECKO_API = 'https://api.coingecko.com/api/v3/simple/token_price';
const NETWORKS = {
    ethereum: {
        api: `https://api.etherscan.io/api?module=stats&action=tokensupply&contractaddress=`,
        key: ETHERSCAN_API_KEY
    },
    bsc: {
        api: `https://api.bscscan.com/api?module=stats&action=tokensupply&contractaddress=`,
        key: BSCSCAN_API_KEY
    }
};

async function updateTokenPrices() {
    let tokens = [];
    if (fs.existsSync(TOKEN_STORAGE)) {
        tokens = JSON.parse(fs.readFileSync(TOKEN_STORAGE));
    }
    
    const updatedTokens = await Promise.all(tokens.map(async (token) => {
        try {
            const response = await axios.get(`${COINGECKO_API}/ethereum`, {
                params: {
                    contract_addresses: token.address,
                    vs_currencies: 'usd',
                    include_market_cap: true
                }
            });
            const data = response.data[token.address.toLowerCase()] || {};
            return { ...token, price: data.usd || 'N/A', market_cap: data.usd_market_cap || 'N/A' };
        } catch (error) {
            console.error(`Error fetching price for ${token.name}:`, error.message);
            return { ...token, price: 'N/A', market_cap: 'N/A' };
        }
    }));

    fs.writeFileSync(TOKEN_STORAGE, JSON.stringify(updatedTokens, null, 2));
    console.log('Token prices updated successfully.');
}

setInterval(updateTokenPrices, 60000); // Mise Ã  jour toutes les 60 sec
updateTokenPrices();

module.exports = { updateTokenPrices };
